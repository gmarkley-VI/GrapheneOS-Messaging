name: Release on Main

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: 21
          cache: gradle

      - name: Read current version
        id: current_version
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Determine version bump
        id: version_bump
        run: |
          # Get the commit message that triggered this workflow
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"

          # Default to patch bump
          BUMP_TYPE="patch"

          # Check commit message for version bump indicators
          if echo "$COMMIT_MSG" | grep -qiE "BREAKING CHANGE:|breaking:|major:|\[major\]"; then
            BUMP_TYPE="major"
          elif echo "$COMMIT_MSG" | grep -qiE "feat:|feature:|minor:|\[minor\]"; then
            BUMP_TYPE="minor"
          fi

          echo "BUMP_TYPE=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Bump type: $BUMP_TYPE"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.VERSION }}"
          BUMP_TYPE="${{ steps.version_bump.outputs.BUMP_TYPE }}"

          # Split version into components
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          # Increment based on bump type
          if [ "$BUMP_TYPE" = "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$BUMP_TYPE" = "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Build Release APK
        run: |
          ./gradlew assembleRelease --no-daemon
          ./gradlew assembleDebug --no-daemon

      - name: Sign Release APK (if keystore exists)
        id: sign_apk
        continue-on-error: true
        run: |
          # This step will only work if you add a signing key
          # For now, we'll use the unsigned APK
          echo "APK signing skipped - no keystore configured"
          echo "SIGNED=false" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.new_version.outputs.NEW_VERSION }}
          name: Release v${{ steps.new_version.outputs.NEW_VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            app/build/outputs/apk/release/*.apk
            app/build/outputs/apk/debug/*.apk
          body: |
            ## GrapheneOS Messaging Fork - v${{ steps.new_version.outputs.NEW_VERSION }}

            ### Installation
            1. Download the appropriate APK:
               - **app-release-unsigned.apk**: Production build (unsigned)
               - **app-debug.apk**: Debug build for testing
            2. Enable "Unknown Sources" in Android settings
            3. Install the APK

            ### Version Bump Type: ${{ steps.version_bump.outputs.BUMP_TYPE }}

            Commit: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version files
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.NEW_VERSION }}"

          # Update version.txt
          echo "$NEW_VERSION" > version.txt

          # Calculate versionCode from semantic version
          IFS='.' read -ra VERSION_PARTS <<< "$NEW_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          VERSION_CODE=$((MAJOR * 10000 + MINOR * 100 + PATCH))

          # Update build.gradle.kts
          sed -i "s/versionCode = .*/versionCode = $VERSION_CODE/" app/build.gradle.kts
          sed -i "s/versionName = .*/versionName = \"$NEW_VERSION\"/" app/build.gradle.kts

          # Commit changes
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add version.txt app/build.gradle.kts
          git commit -m "Bump version to $NEW_VERSION [skip ci]"
          git push